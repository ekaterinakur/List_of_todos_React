{"version":3,"sources":["redux/actions.js","redux/reducers.js","Components/User.js","Components/TodoItemHandler.js","Components/TodoItem.js","Components/TodoListHandler.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_DATA","FILL_DATA","REMOVE_TODO","SORT_TODOS","load","dispatch","type","Promise","all","fetch","then","res","json","_ref","_ref2","Object","slicedToArray","todos","users","todosData","map","todo","owner","find","user","userId","id","objectSpread","status","completed","userName","name","userEmail","email","data","initialState","requested","User","props","react_default","a","createElement","Fragment","href","className","TodoItemHandler","connect","state","ownProps","title","index","removeTodo","onClick","TodoListHandler","buttonClicked","sortTodos","field","disabled","Components_TodoItemHandler","key","store","createStore","arguments","length","undefined","action","filter","post","clonedData","toConsumableArray","sort","b","localeCompare","applyMiddleware","thunk","App","es","Components_TodoListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a330a96.chunk.js","sourcesContent":["export const LOAD_DATA = 'load_data';\nexport const FILL_DATA = 'fill_data';\nexport const REMOVE_TODO = 'remove_todo';\nexport const SORT_TODOS = 'sort_todos';\n\nexport function load() {\n  return dispatch => {\n    dispatch({\n        type: LOAD_DATA\n    });\n\n    Promise.all([\n      fetch('https://jsonplaceholder.typicode.com/todos')\n        .then(res => res.json()),\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json())\n    ])\n    .then(([todos, users]) => {\n      const todosData = todos.map((todo) => {\n        const owner = users.find(user => todo.userId === user.id);\n        return {\n          ...todo,\n          status: todo.completed ? 'completed' : 'not completed',\n          user: owner,\n          userName: owner.name,\n          userEmail: owner.email\n        }\n      });\n      dispatch(fillData(todosData));\n    })\n  }\n}\n\nexport function fillData(data) {\n  return {\n    type: FILL_DATA,\n    data\n  }\n}\n\nexport function removeTodo(index) {\n  return {\n    type: REMOVE_TODO,\n    index\n  }\n}\n\nexport function sortTodos(field) {\n  return {\n    type: SORT_TODOS,\n    field\n  }\n}\n","import { LOAD_DATA,\n  FILL_DATA,\n  REMOVE_TODO,\n  SORT_TODOS } from \"./actions\";\n\nconst initialState = {\n  requested: false,\n  data: null,\n};\n\nexport function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_DATA:\n      return {\n        ...state,\n        requested: true\n      }\n    case FILL_DATA:\n      return {\n        ...state,\n        data: action.data\n      }\n    case REMOVE_TODO:\n      return {\n        ...state,\n        data: state.data.filter((post, index) => index !== action.index)\n      }\n    case SORT_TODOS:\n      const clonedData = [...state.data];\n      clonedData.sort((a, b) => a[action.field].localeCompare(b[action.field]))\n      return {\n        ...state,\n        data: clonedData\n      }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\n\nexport default function User(props) {\n  const { user, email } = props;\n\n  return (\n    <React.Fragment>\n      <a href={'mailto:' + email}><span className=\"email\">&#9993;</span>\n        {user}\n      </a>\n    </React.Fragment>\n  );\n}\n\n","import { connect } from 'react-redux';\nimport { removeTodo } from '../redux/actions';\nimport TodoItem from './TodoItem';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    title: ownProps.todo.title,\n    user: ownProps.todo.userName,\n    email: ownProps.todo.userEmail,\n    status: ownProps.todo.status,\n    index: ownProps.index\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removeTodo: (index) => dispatch(removeTodo(index))\n  }\n}\n\nconst TodoItemHandler = connect(mapStateToProps, mapDispatchToProps)(TodoItem);\n\nexport default TodoItemHandler;\n","import React from 'react';\nimport User from './User';\n\nexport default function TodoItem(props) {\n  const { title,\n          user,\n          email,\n          status,\n          index,\n          removeTodo } = props;\n\n  return (\n    <tr>\n      <td>{title}</td>\n      <td><User user={user} email={email} /></td>\n      <td>{status}</td>\n      <td onClick={() => removeTodo(index)}>&times;</td>\n    </tr>\n  )\n}\n","import { connect } from 'react-redux';\nimport { load, sortTodos } from '../redux/actions';\nimport TodoList from './TodoList';\n\nfunction mapStateToProps(state) {\n  return {\n    requested: state.requested,\n    data: state.data\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    buttonClicked: () => dispatch(load()),\n    sortTodos: (field) => dispatch(sortTodos(field))\n  }\n}\n\nconst TodoListHandler = connect(mapStateToProps, mapDispatchToProps)(TodoList);\n\nexport default TodoListHandler;\n","import React from 'react';\nimport TodoItemHandler from './TodoItemHandler';\nimport '../styles/TodoList.css';\n\nexport default function TodoList(props) {\n  const { requested,\n          data,\n          buttonClicked,\n          sortTodos } = props;\n\n  if (!requested){\n    return <button onClick={buttonClicked} className=\"load\">Load TODOs</button>;\n  }\n  if (data === null) {\n    return <button className=\"load\" disabled>Loading...</button>;\n  }\n\n  return (\n    <table className=\"todos-table\">\n      <thead>\n        <tr>\n          <th onClick={() => sortTodos('title')}>Item</th>\n          <th onClick={() => sortTodos('userName')}>User</th>\n          <th onClick={() => sortTodos('status')}>Status</th>\n          <th>X</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((todo, index) => <TodoItemHandler todo={todo} index={index} key={todo.id} />)}\n      </tbody>\n    </table>\n  );\n}\n","import React from 'react';\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport { getNextState } from './redux/reducers';\nimport TodoListHandler from './Components/TodoListHandler';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <TodoListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}